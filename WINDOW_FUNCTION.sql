-- 1. **Rank the customers based on the total amount they've spent on rentals.**


select customer_id,sum(amount) total_rental,dense_rank() over(order by sum(amount)) as rental_rank 
from payment
group by customer_id;


-- 2. **Calculate the cumulative revenue generated by each film over time.**
    
  select distinct f.film_id,f.title, date(rental_date) , amount,                     
		 sum(amount) over(partition by f.film_id order by date(rental_date)) as cumulative_revenue
  from payment p
  join rental r
  on p.rental_id=r.rental_id
  join inventory i
  on r.inventory_id =i.inventory_id
  join film f
  on  f.film_id=i.film_id;  



-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**

select film_id,title,length,avg(rental_duration) over(partition by length) as avg_rental
from film  ;                                                                                    


-- 4. **Identify the top 3 films in each category based on their rental counts.**
  
  select*                                                                                  
 from (select distinct category_id, film_id,  x.film_rental,   
	       dense_rank() over(partition by category_id order  by x.film_rental) AS ranking
       from (select  f.film_id,fc.category_id,count(r.rental_id) over(partition by film_id ) as film_rental
               from payment p
  join rental r
  on p.rental_id=r.rental_id
  join inventory i
  on r.inventory_id =i.inventory_id
  join film f
  on  f.film_id=i.film_id
  join film_category fc
  on  f.film_id= fc.film_id
  join category c
  on c.category_id =fc.category_id) as x)  as y
  where  y.ranking<4;

                      
/*5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
across all customers.***/                                                                    
     
     select customer_id,count(rental_id) total_rental_count ,                                         
					    avg(count(rental_id)) over() avg_rental,
                        count(rental_id)-avg(count(rental_id)) over() as difference
     from rental
     group by customer_id;


-- 6. **Find the monthly revenue trend for the entire rental store over time.**
   
 select date(payment_date) as payment_date ,month(payment_date),amount,
  sum(amount) over(partition by month(payment_date) order by payment_date) monthly_running_sum  
  from payment p
  join rental r
  on p.rental_id=r.rental_id
  join inventory i
  on r.inventory_id =i.inventory_id;



-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
             
select *                                                           
 from (select customer_id,sum(amount) as total_spending,
	   percent_rank() over(order by customer_id) as pr
	   from payment
	   group by customer_id) x
where x.pr <= 0.20;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

 select  *,sum(x.film_rental) over(partition by category_id order by film_id) AS cumulative_sum           
 from (select distinct f.film_id,f.title,fc.category_id,name,
		count(r.rental_id) over(partition by film_id ) as film_rental
  from payment p
  join rental r
  on p.rental_id=r.rental_id
  join inventory i
  on r.inventory_id =i.inventory_id
  join film f
  on  f.film_id=i.film_id
  join film_category fc
  on  f.film_id= fc.film_id
  join category c
  on c.category_id =fc.category_id) x ;
  

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.** 

select *
  from(select distinct category_id,name,film_id,title,film_rental, avg(film_rental) over(partition by category_id) as avg_rental
  from(select f.film_id, f.title,fc.category_id,c.name,count(r.rental_id) over(partition by film_id) as film_rental
  from payment p
  join rental r
  on p.rental_id=r.rental_id
  join inventory i
  on r.inventory_id =i.inventory_id
  join film f
  on  f.film_id=i.film_id
  join film_category fc
  on  f.film_id= fc.film_id
  join category c
  on c.category_id =fc.category_id) as x) y
  where y.film_rental< y.avg_rental;
  

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

select *
from   (select month(payment_date) , sum(amount) as month_wise_revenue,
	   rank() over(order by sum(amount) desc) as ranking_order
       from payment
       group by month(payment_date)) x
where x.ranking_order <=5                                                                









